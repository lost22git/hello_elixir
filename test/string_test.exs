defmodule StringTest do
  use ExUnit.Case

  test "string is a binary " do
    assert "‰Ω†Â•Ω" == <<"‰Ω†Â•Ω"::utf8>>

    assert is_binary("‰Ω†Â•Ω")

    # of course, is a bitstring
    assert is_bitstring("‰Ω†Â•Ω")
  end

  test "string <=> charlist" do
    assert String.to_charlist("‰Ω†Â•Ω") == ~c"‰Ω†Â•Ω"
    assert "‰Ω†Â•Ω" == to_string(~c"‰Ω†Â•Ω")

    # charlist is a codepoint list
    assert ~c"‰Ω†Â•Ω" == [?‰Ω†, ?Â•Ω]
    assert is_list(~c"‰Ω†Â•Ω")

    # ?‰Ω† is a codepoint
    assert is_integer(?‰Ω†)
  end

  test "string concat" do
    assert "‰Ω†Â•Ω, " <> "elixir" == "‰Ω†Â•Ω, elixir"
  end

  test "string interpolate" do
    name = "elixir"
    assert "‰Ω†Â•Ω, elixir" == "‰Ω†Â•Ω, #{name}"
  end

  test "string length /  byte_size" do
    assert String.length("‰Ω†Â•Ω") == 2
    assert byte_size("‰Ω†Â•Ω") == 2 * 3
  end

  test "string codepoints and grapheme" do
    # NOTE: please view it by an editor which supports grapheme cluster
    s = "‰Ω†Â•Ω, üë®‚ÄçüöÄ"

    assert String.codepoints(s) == ["‰Ω†", "Â•Ω", ",", " ", "üë®", "‚Äç", "üöÄ"]
    assert String.graphemes(s) == ["‰Ω†", "Â•Ω", ",", " ", "üë®‚ÄçüöÄ"]
  end

  test "string without escaping quotes" do
    name = "elixir"
    # ‰Ω†Â•Ω, "elixir"
    # ~s
    assert "‰Ω†Â•Ω, \"elixir\"" == ~s(‰Ω†Â•Ω, "#{name}")
    assert "‰Ω†Â•Ω, \"elixir\"" == ~s{‰Ω†Â•Ω, "#{name}"}
    assert "‰Ω†Â•Ω, \"elixir\"" == ~s/‰Ω†Â•Ω, "#{name}"/
    assert "‰Ω†Â•Ω, \"elixir\"" == ~s'‰Ω†Â•Ω, "#{name}"'

    # ~w
    assert ["‰Ω†Â•Ω", "\"elixir\""] == ~w(‰Ω†Â•Ω "#{name}")
  end

  test "string multilines" do
    name = "elixir"

    json = """
    {
      "hello": "#{name}"
    }
    """

    assert "{\n  \"hello\": \"elixir\"\n}\n" == json
  end

  test "string split" do
    s = "‰Ω†Â•Ω, elixir"

    assert String.split(s, [",", " "]) == ["‰Ω†Â•Ω", "", "elixir"]

    assert String.split(s, [",", " "], trim: true) == ["‰Ω†Â•Ω", "elixir"]

    assert String.split(s, [",", " "], parts: 2) == ["‰Ω†Â•Ω", " elixir"]
  end

  test "string replace" do
    assert String.replace("‰Ω†Â•Ω, elixir", "‰Ω†Â•Ω", "hello") == "hello, elixir"
  end

  test "string slice" do
    # range: from..to//step
    assert String.slice("hello", 2..3) == "ll"
    assert String.slice("hello", 2..999) == "llo"
    assert String.slice("hello", 2..999//2) == "lo"
    assert String.slice("hello", 2..-2//1) == "ll"
  end

  # test "string format" do
  #   # https://www.erlang.org/doc/man/io.html#type-format
  #   IO.puts(:io_lib.format("hello ~10s ~n", ["üëª"]))
  # end

  test "string <=> date time" do
    assert ~U"2022-02-02T22:22:22Z" ==
             (case(DateTime.from_iso8601("2022-02-02T22:22:22Z")) do
                {:ok, datetime, _tz} -> datetime
                {:error, _} -> DateTime.utc_now()
              end)
  end
end
